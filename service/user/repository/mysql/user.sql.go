// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package mysql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
insert into user(id, firstname, lastname, login) values (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID        uuid.UUID      `json:"id"`
	Firstname string         `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	Login     string         `json:"login"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Login,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from user where id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const listUsers = `-- name: ListUsers :many
select id, firstname, lastname, login from user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Login,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
